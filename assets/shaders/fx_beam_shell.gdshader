shader_type spatial;
render_mode unshaded, cull_front;
uniform float power = 1.0;
uniform float beam_length = 1.0;
uniform vec3 color : source_color = vec3(1.0);
uniform float brightness = 5.0;

float mod289_1(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 mod289_4(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289_4(((x * 34.0) + 1.0) * x);}
float noise(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}


void fragment() {
	float n = noise(vec3(UV.x*10.0,(UV.y*2.5)*beam_length-TIME*25.0,TIME))+clamp(1.0-4.0*UV.y*beam_length,0.5,1.0);
	if(n>power-0.1){
		discard;
	}
	ALBEDO = color*brightness;
}
